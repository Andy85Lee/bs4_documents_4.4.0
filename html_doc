# -*- coding:utf-8 -*-
#html_doc = """
#<html><head><title>The Dormouse's story</title>
#<b><!--i'm comment--></b></head>
#<body>
#<p class="title"><b>The Dormouse's story</b></p>
#
#<p class="story">Once upon a time there were three little sisters; and their names were
#<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,
#<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and
#<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;
#and they lived at the bottom of a well.</p>
#
#<p class="story">...</p>
#"""
#markup = '<a href="http://example.com/">I linked to <i>example.com</i></a>'
from bs4 import BeautifulSoup
markup = "<h1>Sacr\xc3\xa9 bleu!</h1>"
soup=BeautifulSoup(markup,'html.parser')
print soup.h1
print soup.original_encoding
#from bs4 import BeautifulSoup
#soup=BeautifulSoup(markup,'html.parser')
#tag_a=soup.a
#print tag_a
#new_tag=soup.new_tag('b')
#new_tag.string='example.net'
#tag_a.i.replace_with(new_tag)
#tag_a.b.wrap(soup.new_tag('i'))
#print tag_a.get_text('|')
#from bs4 import Comment
##soup=BeautifulSoup(html_doc,'html.parser')
#another_soup=BeautifulSoup('<b></b>','html.parser')
#tag_b=another_soup.b
#tag_b.append('Hello')
#new_string=another_soup.new_string(' there')
#tag_b.append(new_string)
#new_comment=another_soup.new_string('Nice to see you',Comment)
#tag_b.append(new_comment)
#tag_b.insert(1,'here')
##tag_b.clear()
#print tag_b
#tag_b.contents[0].extract()
#print tag_b
#soup.b.append('Bar')
#print soup.b
#tag_a=soup.a for sibling in tag_a.next_siblings:
#  print 'tag_a.next_siblings :',repr(sibling)
#print "find_next_siblings('a') :",tag_a.find_next_siblings('a')
#def is_the_only_string_within_a_tag(s):
#  return s==s.parent.string
#print soup.find_all('a',text=is_the_only_string_within_a_tag)
#def has_six_characters(css_class):
#  return css_class is not None and len(css_class)==6
#print soup.find_all(class_=has_six_characters)
#print soup.find_all('a',class_='sister')
#from bs4 import NavigableString
#def surrounded_by_strings(tag):
#    return (isinstance(tag.next_element,NavigableString) and
#    isinstance(tag.previous_element,NavigableString))
#
#for tag in soup.find_all(surrounded_by_strings):
#  print tag.name
#def has_class_but_no_id(tag):
#  return tag.has_attr('class') and not tag.has_attr('id')
#print soup.find_all(has_class_but_no_id)
#import re
#for tag in soup.find_all(True):
#for tag in soup.find_all(['a','b']):
#for tag in soup.find_all(re.compile('^b')):
#  print tag.name
#last_a_tag=soup.find('a',id='link3')
#print last_a_tag
#print last_a_tag.next_sibling
#print last_a_tag.next_element
#print soup.title.next_sibling.next_sibling
#for parent in soup.a.parents:
#  print 'parent :',parent
#  if parent is None:
#    print 'parent'
#  else:
#    print (parent.name)
#for string in soup.stripped_strings:
#  print repr(string)
#print soup.b.string
#soup_head=soup.head
#print type(soup_head.children)
#for child in soup_head.descendants:
#  print child
#print len(list(soup_head.children)),len(list(soup_head.descendants))
#print soup.title.contents[0].contents
#print soup_head.contents
#print soup_head.contents[2]
#print soup.contents
#print len(soup.contents)
#print soup.contents[1].name
#print soup.name
#print soup.prettify()
#print soup.p.prettify()
#comment=soup.b.string
#print type(comment)
#print comment
#print soup.b.prettify()
#print 'soup.title :',soup.title
#print 'soup.title.name :',soup.title.name
#print 'soup.title.string :',soup.title.string
#print 'soup.title.parent.name :',soup.title.parent.name
#print 'soup.p :',soup.p
#print "soup.p['class'] :",soup.p['class']
#print 'soup.a :',soup.a
#print "soup.find_all('a') :",soup.find_all('a')
#print "soup.find(id='link3') :",soup.find(id='link3')
#for link in soup.find_all('a'):
#  print link.get_text()
#print soup.get_text()
#tag_b=soup.b
#tag_b.name='blockquote'
#print tag_b
#print soup.a['href']
#tag_a=soup.a
#print 'tag_a :',tag_a
#print 'tag_a.string :',tag_a.string
#tag_p=soup.p
#print tag_p.string
#tag_p.string.replace_with('haha')
#print tag_p.string
#print type(tag_p.string)
#tag_p=unicode(tag_p.string)
#print tag_p,type(tag_p)
#class_attrsOFtag_a=tag_a['class']
#print class_attrsOFtag_a
#class_attrsOFtag_a=['sister','brother']
#print class_attrsOFtag_a
#soup.a['class']=class_attrsOFtag_a
#print 'soup.a :',soup.a
#attr_href=tag_a['href']
#attr_id=tag_a['id']
#attr_class=tag_a['class']
##attr_class='class_ch'
#print attr_class
